---
export interface Props {
  src: string;
  title?: string;
  description?: string;
  width?: string;
  height?: string;
  theme?: 'default' | 'minimal' | 'dark';
  showTitle?: boolean;
  showArtist?: boolean;
  showDuration?: boolean;
  autoplay?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
  loop?: boolean;
  muted?: boolean;
  controls?: boolean;
  artist?: string;
  album?: string;
  coverArt?: string;
  className?: string;
  style?: string;
  volume?: number;
  playbackRate?: number;
}

const {
  src,
  title,
  description,
  width = '100%',
  height = 'auto',
  theme = 'default',
  showTitle = true,
  showArtist = true,
  showDuration = true,
  autoplay = false,
  preload = 'metadata',
  loop = false,
  muted = false,
  controls = false,
  artist,
  album,
  coverArt,
  className = '',
  style = '',
  volume = 1,
  playbackRate = 1
} = Astro.props;

const uniqueId = `audio-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`audio-player-container ${theme} ${className}`}
  style={style}
  data-audio-src={src}
>
  {showTitle && title && (
    <div class="audio-title">{title}</div>
  )}
  
  <audio
    id={uniqueId}
    src={src}
    preload={preload}
    autoplay={autoplay}
    loop={loop}
    muted={false}
    controls={false}
    style={`width: ${width}; height: ${height};`}
  ></audio>
  
  <div class="custom-controls">
    <button class="play-pause-btn" data-audio-id={uniqueId}>
      <span class="play-icon">‚ñ∂</span>
      <span class="pause-icon">‚è∏</span>
    </button>
    
    <div class="progress-section">
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
      <div class="time-display">
        <span class="current-time">0:00</span>
        {showDuration && <span class="duration">0:00</span>}
      </div>
    </div>
    
    <div class="control-buttons">
      <button class="mute-btn" data-audio-id={uniqueId} title="Mute/Unmute">
        <span class="unmute-icon">üîä</span>
        <span class="mute-icon">üîá</span>
      </button>
      
      <a href={src} download class="download-btn" title="Download audio">
        <svg class="download-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 15.75L12 3.75" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M7.5 10.5L12 15L16.5 10.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M3.75 15.75V18.75C3.75 19.1642 4.08579 19.5 4.5 19.5H19.5C19.9142 19.5 20.25 19.1642 20.25 18.75V15.75" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const audioPlayers = document.querySelectorAll('.audio-player-container');
    
    audioPlayers.forEach((container, index) => {
      const audio = container.querySelector('audio');
      const playPauseBtn = container.querySelector('.play-pause-btn');
      const muteBtn = container.querySelector('.mute-btn');
      const progressBar = container.querySelector('.progress-bar');
      const progressFill = container.querySelector('.progress-fill');
      const currentTimeSpan = container.querySelector('.current-time');
      const durationSpan = container.querySelector('.duration');
      
      if (!audio) {
        console.error('No audio element found in player', index + 1);
        return;
      }
      
      // Ensure audio is not muted by default
      audio.muted = false;
      if (muteBtn) {
        muteBtn.classList.remove('muted');
      }
      
      // Play/Pause functionality
      if (playPauseBtn) {
        playPauseBtn.addEventListener('click', () => {
          if (audio.paused) {
            audio.play().then(() => {
              container.classList.add('playing');
            }).catch(error => {
              console.error(`Audio play failed for player ${index + 1}:`, error);
            });
          } else {
            audio.pause();
            container.classList.remove('playing');
          }
        });
      }
      
      // Mute/Unmute functionality
      if (muteBtn) {
        muteBtn.addEventListener('click', () => {
          audio.muted = !audio.muted;
          if (audio.muted) {
            muteBtn.classList.add('muted');
          } else {
            muteBtn.classList.remove('muted');
          }
        });
      }
      
      // Progress bar functionality
      if (progressBar && progressFill) {
        progressBar.addEventListener('click', (e) => {
          const rect = progressBar.getBoundingClientRect();
          const percent = (e.clientX - rect.left) / rect.width;
          audio.currentTime = percent * audio.duration;
        });
      }
      
      // Update progress bar
      audio.addEventListener('timeupdate', () => {
        if (progressFill && audio.duration) {
          const percent = (audio.currentTime / audio.duration) * 100;
          progressFill.style.width = percent + '%';
        }
        
        if (currentTimeSpan) {
          currentTimeSpan.textContent = formatTime(audio.currentTime);
        }
      });
      
      // Update duration when metadata loads
      audio.addEventListener('loadedmetadata', () => {
        if (durationSpan) {
          durationSpan.textContent = formatTime(audio.duration);
        }
      });
      
      // Handle play/pause state changes
      audio.addEventListener('play', () => {
        if (playPauseBtn) {
          container.classList.add('playing');
        }
      });
      
      audio.addEventListener('pause', () => {
        if (playPauseBtn) {
          container.classList.remove('playing');
        }
      });
      
      // Error handling
      audio.addEventListener('error', (e) => {
        console.error(`Audio player ${index + 1} error:`, e);
      });
    });
  });
  
  function formatTime(seconds) {
    if (isNaN(seconds)) return '0:00';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }
</script>
