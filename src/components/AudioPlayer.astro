---
export interface Props {
  // Required
  src: string; // URL to the audio file (MP3 from R2 bucket)
  
  // Player appearance
  width?: string;
  height?: string;
  theme?: 'default' | 'minimal' | 'dark' | 'custom';
  showTitle?: boolean;
  showArtist?: boolean;
  showDuration?: boolean;
  
  // Player behavior
  autoplay?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
  loop?: boolean;
  muted?: boolean;
  controls?: boolean;
  
  // Audio metadata
  title?: string;
  artist?: string;
  album?: string;
  coverArt?: string;
  
  // Styling
  className?: string;
  style?: string;
  
  // Advanced options
  volume?: number; // 0-1
  playbackRate?: number; // 0.5-2
}

const {
  src,
  width = '100%',
  height = 'auto',
  theme = 'default',
  showTitle = true,
  showArtist = true,
  showDuration = true,
  autoplay = false,
  preload = 'metadata',
  loop = false,
  muted = false,
  controls = true,
  title,
  artist,
  album,
  coverArt,
  className = '',
  style = '',
  volume = 1,
  playbackRate = 1
} = Astro.props;

const uniqueId = `audio-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`audio-player-container ${theme} ${className}`}
  style={style}
  data-audio-src={src}
>
  {coverArt && (
    <div class="audio-cover">
      <img src={coverArt} alt={title || 'Album cover'} />
    </div>
  )}
  
  <div class="audio-info">
    {showTitle && title && (
      <div class="audio-title">{title}</div>
    )}
    {showArtist && artist && (
      <div class="audio-artist">{artist}</div>
    )}
    {album && (
      <div class="audio-album">{album}</div>
    )}
  </div>
  
  <audio
    id={uniqueId}
    src={src}
    preload={preload}
    autoplay={autoplay}
    loop={loop}
    muted={muted}
    controls={controls}
    style={`width: ${width}; height: ${height};`}
  ></audio>
  
  {!controls && (
    <div class="custom-controls">
      <button class="play-pause-btn" data-audio-id={uniqueId}>
        <span class="play-icon">▶</span>
        <span class="pause-icon">⏸</span>
      </button>
      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress-fill"></div>
        </div>
        <div class="time-display">
          <span class="current-time">0:00</span>
          {showDuration && <span class="duration">0:00</span>}
        </div>
      </div>
      <div class="volume-control">
        <input type="range" class="volume-slider" min="0" max="1" step="0.1" value={volume} />
      </div>
    </div>
  )}
</div>

<style>
  .audio-player-container {
    margin: 2rem 0;
    padding: 1.5rem;
    border-radius: 12px;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .audio-player-container audio {
    width: 100%;
    border-radius: 8px;
  }
  
  .audio-cover {
    text-align: center;
    margin-bottom: 1rem;
  }
  
  .audio-cover img {
    width: 120px;
    height: 120px;
    border-radius: 8px;
    object-fit: cover;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  .audio-info {
    margin-bottom: 1rem;
    text-align: center;
  }
  
  .audio-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-text);
    margin-bottom: 0.25rem;
  }
  
  .audio-artist {
    font-size: 1rem;
    color: var(--color-light-text);
    margin-bottom: 0.25rem;
  }
  
  .audio-album {
    font-size: 0.875rem;
    color: var(--color-light-text);
    font-style: italic;
  }
  
  /* Custom Controls */
  .custom-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .play-pause-btn {
    background: var(--color-accent);
    color: white;
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    transition: all 0.2s ease;
  }
  
  .play-pause-btn:hover {
    background: var(--color-text);
    transform: scale(1.05);
  }
  
  .pause-icon {
    display: none;
  }
  
  .playing .play-icon {
    display: none;
  }
  
  .playing .pause-icon {
    display: block;
  }
  
  .progress-container {
    flex: 1;
  }
  
  .progress-bar {
    width: 100%;
    height: 6px;
    background: var(--color-border);
    border-radius: 3px;
    cursor: pointer;
    position: relative;
    margin-bottom: 0.5rem;
  }
  
  .progress-fill {
    height: 100%;
    background: var(--color-accent);
    border-radius: 3px;
    width: 0%;
    transition: width 0.1s ease;
  }
  
  .time-display {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
    color: var(--color-light-text);
  }
  
  .volume-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .volume-slider {
    width: 80px;
    height: 4px;
    background: var(--color-border);
    border-radius: 2px;
    outline: none;
    cursor: pointer;
  }
  
  .volume-slider::-webkit-slider-thumb {
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
  }
  
  /* Theme Variations */
  .minimal {
    padding: 1rem;
    border: none;
    box-shadow: none;
  }
  
  .minimal .audio-info {
    display: none;
  }
  
  .dark {
    background: #1a1a1a;
    border-color: #333;
    color: white;
  }
  
  .dark .audio-title {
    color: white;
  }
  
  .dark .audio-artist,
  .dark .audio-album {
    color: #ccc;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .audio-player-container {
      padding: 1rem;
    }
    
    .custom-controls {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .volume-control {
      width: 100%;
      justify-content: center;
    }
    
    .volume-slider {
      width: 120px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const audioPlayers = document.querySelectorAll('.audio-player-container');
    
    audioPlayers.forEach(container => {
      const audio = container.querySelector('audio') as HTMLAudioElement;
      const playPauseBtn = container.querySelector('.play-pause-btn') as HTMLButtonElement;
      const progressBar = container.querySelector('.progress-bar') as HTMLElement;
      const progressFill = container.querySelector('.progress-fill') as HTMLElement;
      const currentTimeSpan = container.querySelector('.current-time') as HTMLElement;
      const durationSpan = container.querySelector('.duration') as HTMLElement;
      const volumeSlider = container.querySelector('.volume-slider') as HTMLInputElement;
      
      if (!audio) return;
      
      // Initialize volume
      if (volumeSlider) {
        audio.volume = parseFloat(volumeSlider.value);
      }
      
      // Play/Pause functionality
      if (playPauseBtn) {
        playPauseBtn.addEventListener('click', () => {
          if (audio.paused) {
            audio.play();
            container.classList.add('playing');
          } else {
            audio.pause();
            container.classList.remove('playing');
          }
        });
      }
      
      // Progress bar functionality
      if (progressBar && progressFill) {
        progressBar.addEventListener('click', (e: MouseEvent) => {
          const rect = progressBar.getBoundingClientRect();
          const percent = (e.clientX - rect.left) / rect.width;
          audio.currentTime = percent * audio.duration;
        });
      }
      
      // Update progress bar
      audio.addEventListener('timeupdate', () => {
        if (progressFill && audio.duration) {
          const percent = (audio.currentTime / audio.duration) * 100;
          progressFill.style.width = percent + '%';
        }
        
        if (currentTimeSpan) {
          currentTimeSpan.textContent = formatTime(audio.currentTime);
        }
      });
      
      // Update duration when metadata loads
      audio.addEventListener('loadedmetadata', () => {
        if (durationSpan) {
          durationSpan.textContent = formatTime(audio.duration);
        }
      });
      
      // Volume control
      if (volumeSlider) {
        volumeSlider.addEventListener('input', (e: Event) => {
          const target = e.target as HTMLInputElement;
          if (target) {
            audio.volume = parseFloat(target.value);
          }
        });
      }
      
      // Handle play/pause state changes
      audio.addEventListener('play', () => {
        if (playPauseBtn) {
          container.classList.add('playing');
        }
      });
      
      audio.addEventListener('pause', () => {
        if (playPauseBtn) {
          container.classList.remove('playing');
        }
      });
    });
  });
  
  function formatTime(seconds: number): string {
    if (isNaN(seconds)) return '0:00';
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }
</script> 