---
export interface Props {
  // Required
  videoId: string;
  
  // Player appearance
  width?: string;
  height?: string;
  aspectRatio?: '16:9' | '4:3' | '1:1' | '21:9';
  responsive?: boolean;
  
  // Player behavior
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  controls?: boolean;
  pip?: boolean; // Picture in Picture
  
  // Player customization
  color?: string; // Hex color for player controls
  title?: boolean; // Show video title
  byline?: boolean; // Show uploader name
  portrait?: boolean; // Show uploader portrait
  
  // Advanced options
  startTime?: number; // Start time in seconds
  endTime?: number; // End time in seconds
  quality?: 'auto' | '240p' | '360p' | '540p' | '720p' | '1080p' | '2k' | '4k';
  
  // Accessibility
  title?: string; // For screen readers
  description?: string; // For screen readers
  
  // Styling
  className?: string;
  style?: string;
}

const {
  videoId,
  width = '100%',
  height = 'auto',
  aspectRatio = '16:9',
  responsive = true,
  autoplay = false,
  muted = false,
  loop = false,
  controls = true,
  pip = true,
  color = '#00adef',
  title: showTitle = false,
  byline = false,
  portrait = false,
  startTime = 0,
  endTime,
  quality = 'auto',
  title: accessibilityTitle,
  description,
  className = '',
  style = ''
} = Astro.props;

// Calculate aspect ratio padding
const aspectRatioMap = {
  '16:9': '56.25%',
  '4:3': '75%',
  '1:1': '100%',
  '21:9': '42.86%'
};

const paddingBottom = aspectRatioMap[aspectRatio];

// Build Vimeo URL with parameters
const buildVimeoUrl = () => {
  const params = new URLSearchParams();
  
  if (autoplay) params.append('autoplay', '1');
  if (muted) params.append('muted', '1');
  if (loop) params.append('loop', '1');
  if (!controls) params.append('controls', '0');
  if (!pip) params.append('pip', '0');
  if (color) params.append('color', color.replace('#', ''));
  if (!showTitle) params.append('title', '0');
  if (!byline) params.append('byline', '0');
  if (!portrait) params.append('portrait', '0');
  if (startTime > 0) params.append('t', startTime.toString());
  if (endTime) params.append('end', endTime.toString());
  if (quality !== 'auto') params.append('quality', quality);
  
  return `https://player.vimeo.com/video/${videoId}?${params.toString()}`;
};

const vimeoUrl = buildVimeoUrl();
const uniqueId = `vimeo-${videoId}-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`vimeo-video-container ${className}`}
  style={style}
  data-video-id={videoId}
>
  {responsive ? (
    <div 
      class="vimeo-responsive-wrapper"
      style={`position: relative; padding-bottom: ${paddingBottom}; height: 0; overflow: hidden;`}
    >
      <iframe
        id={uniqueId}
        src={vimeoUrl}
        width="100%"
        height="100%"
        frameborder="0"
        allow="autoplay; fullscreen; picture-in-picture"
        allowfullscreen
        title={accessibilityTitle || `Vimeo video ${videoId}`}
        aria-label={description || `Vimeo video ${videoId}`}
        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
      ></iframe>
    </div>
  ) : (
    <iframe
      id={uniqueId}
      src={vimeoUrl}
      width={width}
      height={height}
      frameborder="0"
      allow="autoplay; fullscreen; picture-in-picture"
      allowfullscreen
      title={accessibilityTitle || `Vimeo video ${videoId}`}
      aria-label={description || `Vimeo video ${videoId}`}
    ></iframe>
  )}
</div>

<style>
  .vimeo-video-container {
    margin: 2rem 0;
  }
  
  .vimeo-responsive-wrapper {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .vimeo-video-container iframe {
    border-radius: 8px;
  }
  
  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .vimeo-responsive-wrapper {
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
    }
  }
</style>

<script>
  // Optional: Add lazy loading for better performance
  document.addEventListener('DOMContentLoaded', () => {
    const videoContainers = document.querySelectorAll('.vimeo-video-container');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const iframe = entry.target.querySelector('iframe');
          if (iframe && !iframe.src.includes('player.vimeo.com')) {
            // This would be used if we implement lazy loading
            // For now, videos load immediately
          }
        }
      });
    }, {
      rootMargin: '50px'
    });
    
    videoContainers.forEach(container => {
      observer.observe(container);
    });
  });
</script> 